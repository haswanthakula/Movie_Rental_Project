{"version":3,"file":"static/js/854.dfcd3353.chunk.js","mappings":"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","sources":["hooks/useAuth.js","components/AdminNavbar.js","pages/admin/AdminDashboard.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useAuth = () => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check localStorage for user data\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, []);\r\n\r\n  const login = (userData) => {\r\n    // Save user data to localStorage\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    setUser(userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear user data from localStorage\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('userRole');\r\n    setUser(null);\r\n  };\r\n\r\n  return {\r\n    user,\r\n    login,\r\n    logout,\r\n    isAuthenticated: !!user,\r\n    isAdmin: user?.role === 'admin',\r\n  };\r\n};\r\n\r\nexport default useAuth;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport useAuth from '../hooks/useAuth';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst AdminNavbar = () => {\r\n  const { logout } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('userRole');\r\n    toast.info('Logged out successfully');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <Nav>\r\n      <NavBrand to=\"/admin/dashboard\">Movie Rental Admin</NavBrand>\r\n      <NavLinks>\r\n        <NavLink to=\"/admin/dashboard\">Dashboard</NavLink>\r\n        <NavLink to=\"/admin/movies\">Movie Management</NavLink>\r\n        <NavLink to=\"/admin/sales-report\">Sales Report</NavLink>\r\n        <LogoutButton onClick={handleLogout}>Logout</LogoutButton>\r\n      </NavLinks>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nconst Nav = styled.nav`\r\n  background: #141e30;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nconst NavBrand = styled(Link)`\r\n  color: white;\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n`;\r\n\r\nconst NavLinks = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n`;\r\n\r\nconst NavLink = styled(Link)`\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  transition: background-color 0.2s;\r\n  \r\n  &:hover {\r\n    background: rgba(255, 255, 255, 0.1);\r\n  }\r\n\r\n  &.active {\r\n    background: rgba(255, 255, 255, 0.1);\r\n  }\r\n`;\r\n\r\nconst LogoutButton = styled.button`\r\n  background: #e50914;\r\n  color: white;\r\n  border: none;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n\r\n  &:hover {\r\n    background: #f40612;\r\n  }\r\n`;\r\n\r\nexport default AdminNavbar;","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Navbar from '../../components/AdminNavbar';\nimport { useMovies } from '../../contexts/MovieContext';\nimport { toast } from 'react-toastify';\n\nconst AdminDashboard = () => {\n  const { movies } = useMovies();\n  const [orders, setOrders] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    Promise.all([fetchOrders(), loadUsers()]);\n  }, []);\n\n  const fetchOrders = async () => {\n    try {\n      const users = JSON.parse(localStorage.getItem('users') || '[]');\n      const allOrders = users.flatMap(user => user.orders || []);\n      setOrders(allOrders);\n    } catch (error) {\n      toast.error('Error loading orders');\n      setError('Error loading orders');\n    }\n  };\n\n  const loadUsers = () => {\n    try {\n      const storedUsers = JSON.parse(localStorage.getItem('users') || '[]');\n      setUsers(storedUsers);\n    } catch (error) {\n      toast.error('Error loading users');\n      setError('Error loading users');\n    }\n  };\n\n  const handleDeleteUser = (userId) => {\n    try {\n      const updatedUsers = users.filter(user => user.id !== userId);\n      localStorage.setItem('users', JSON.stringify(updatedUsers));\n      setUsers(updatedUsers);\n      toast.success('User deleted successfully');\n    } catch (error) {\n      toast.error('Failed to delete user');\n    }\n  };\n\n  // Calculate top ordered movies\n  const getTopOrderedMovies = () => {\n    const movieCounts = {};\n    orders.forEach(order => {\n      if (order.items && Array.isArray(order.items)) {\n        order.items.forEach(item => {\n          const movieId = item.id.toString();\n          movieCounts[movieId] = (movieCounts[movieId] || 0) + (item.quantity || 1);\n        });\n      }\n    });\n\n    return Object.entries(movieCounts)\n      .map(([movieId, count]) => ({\n        movie: movies.find(m => m.id.toString() === movieId),\n        orderCount: count\n      }))\n      .filter(({ movie }) => movie) // Remove entries without a matching movie\n      .sort((a, b) => b.orderCount - a.orderCount)\n      .slice(0, 5);\n  };\n\n  return (\n    <Container>\n      <Navbar />\n      <Content>\n        <Title>Admin Dashboard</Title>\n\n        <Section>\n          <SectionTitle>Top Ordered Movies</SectionTitle>\n          <TopMoviesGrid>\n            {getTopOrderedMovies().map(({ movie, orderCount }) => (\n              <MovieCard key={movie?.id}>\n                <MovieImage src={movie?.image} alt={movie?.title} />\n                <MovieInfo>\n                  <MovieTitle>{movie?.title}</MovieTitle>\n                  <OrderCount>Orders: {orderCount}</OrderCount>\n                  <MoviePrice>${movie?.price}</MoviePrice>\n                </MovieInfo>\n              </MovieCard>\n            ))}\n          </TopMoviesGrid>\n        </Section>\n\n        {/* Users Section */}\n        <Section>\n          <SectionTitle>Registered Users</SectionTitle>\n          {users.length === 0 ? (\n            <NoData>No registered users found</NoData>\n          ) : (\n            <Table>\n              <thead>\n                <tr>\n                  <Th>ID</Th>\n                  <Th>Name</Th>\n                  <Th>Email</Th>\n                  <Th>Registration Date</Th>\n                  <Th>Orders</Th>\n                  <Th>Actions</Th>\n                </tr>\n              </thead>\n              <tbody>\n                {users.map((user) => (\n                  <tr key={user.id}>\n                    <Td>{user.id}</Td>\n                    <Td>{user.name}</Td>\n                    <Td>{user.email}</Td>\n                    <Td>{new Date(parseInt(user.id)).toLocaleDateString()}</Td>\n                    <Td>{user.orders?.length || 0}</Td>\n                    <Td>\n                      <ActionButton \n                        onClick={() => handleDeleteUser(user.id)}\n                        color=\"#e50914\"\n                      >\n                        Delete\n                      </ActionButton>\n                    </Td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          )}\n        </Section>\n\n        {/* Top Ordered Movies */}\n        \n      </Content>\n    </Container>\n  );\n};\n\n// Styled Components\nconst Container = styled.div`\n  min-height: 100vh;\n  background-color: #f5f5f5;\n`;\n\nconst Content = styled.div`\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nconst Title = styled.h1`\n  color: #333;\n  margin-bottom: 2rem;\n`;\n\nconst Section = styled.section`\n  background: white;\n  padding: 1.5rem;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 2rem;\n`;\n\nconst SectionTitle = styled.h2`\n  color: #333;\n  margin: 0 0 1.5rem 0;\n  font-size: 1.5rem;\n`;\n\nconst TopMoviesGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  gap: 0.5rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media (max-width: 480px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nconst MovieCard = styled.div`\n  background: white;\n  border-radius: 4px;\n  overflow: hidden;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n  border: 1px solid #e0e0e0;\n  \n  &:hover {\n    transform: scale(1.05);\n  }\n`;\n\nconst MovieImage = styled.img`\n  width: 100%;\n  height: 120px;\n  object-fit: cover;\n`;\n\nconst MovieInfo = styled.div`\n  padding: 0.5rem;\n  text-align: center;\n`;\n\nconst MovieTitle = styled.h3`\n  margin: 0 0 0.3rem 0;\n  font-size: 0.8rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst OrderCount = styled.div`\n  color: #e50914;\n  font-size: 0.7rem;\n  margin-bottom: 0.2rem;\n`;\n\nconst MoviePrice = styled.div`\n  font-size: 0.7rem;\n  color: #666;\n`;\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 1rem;\n`;\n\nconst Th = styled.th`\n  text-align: left;\n  padding: 1rem;\n  background: #f8f9fa;\n  border-bottom: 2px solid #dee2e6;\n  color: #333;\n`;\n\nconst Td = styled.td`\n  padding: 1rem;\n  border-bottom: 1px solid #dee2e6;\n  color: #666;\n`;\n\nconst ActionButton = styled.button`\n  background: ${props => props.color || '#e50914'};\n  color: white;\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 0.9rem;\n\n  &:hover {\n    opacity: 0.9;\n  }\n`;\n\nconst NoData = styled.div`\n  text-align: center;\n  padding: 2rem;\n  color: #666;\n`;\n\nexport default AdminDashboard;"],"names":["useAuth","user","setUser","useState","useEffect","storedUser","localStorage","getItem","JSON","parse","login","userData","setItem","stringify","logout","removeItem","isAuthenticated","isAdmin","role","Nav","styled","nav","_templateObject","_taggedTemplateLiteral","NavBrand","Link","_templateObject2","NavLinks","div","_templateObject3","NavLink","_templateObject4","LogoutButton","button","_templateObject5","AdminNavbar","navigate","useNavigate","_jsxs","children","_jsx","to","onClick","handleLogout","toast","info","Container","Content","Title","h1","Section","section","SectionTitle","h2","TopMoviesGrid","_templateObject6","MovieCard","_templateObject7","MovieImage","img","_templateObject8","MovieInfo","_templateObject9","MovieTitle","h3","_templateObject10","OrderCount","_templateObject11","MoviePrice","_templateObject12","Table","table","_templateObject13","Th","th","_templateObject14","Td","td","_templateObject15","ActionButton","_templateObject16","props","color","NoData","_templateObject17","AdminDashboard","movies","useMovies","orders","setOrders","users","setUsers","error","setError","Promise","all","fetchOrders","loadUsers","async","allOrders","flatMap","storedUsers","Navbar","getTopOrderedMovies","movieCounts","forEach","order","items","Array","isArray","item","movieId","id","toString","quantity","Object","entries","map","_ref","count","movie","find","m","orderCount","filter","_ref2","sort","a","b","slice","_ref3","src","image","alt","title","price","length","_user$orders","name","email","Date","parseInt","toLocaleDateString","userId","updatedUsers","success","handleDeleteUser"],"sourceRoot":""}